HTTP/1.0 200 OK\r\n
Location: http://moe_pi_server\r\n
Expires: 0\r\n
Content-Type: text/html\r\n
\r\n
<!DOCTYPE html>
<html>
	<head>
		<title>MOE Pi Server</title>
		<style type="text/css">
			img, canvas {
				position: fixed;
				top: 0;
				left: 0;
				height: 100%;
				width: 100%;
			}
			button {
				position: fixed;
				top: 0;
				right: 0;
				opacity: .5;
				transition: opacity .5s;
				border-bottom-left-radius: 50px;
				border-width: 0;
				padding: 1px 2px 6px 10px;
				outline: none;
			}
			button:hover {
				opacity: 1;
			}
			.lock-label {
				position: fixed;
				bottom: 0;
				right: 0;
			}
			.locked:before {
				color: red;
				content: 'Locked';
			}
			.unlocked:before {
				color: yellow;
				content: 'Unlocked';
			}
		</style>
	</head>
	<body>
		<img src="stream.jpg"/>
		<canvas></canvas>
		<button onclick="window.open(document.URL+'#no_popup','_blank','height=240,width=320,chrome=yes,scrollbars=yes,status=no,menubar=no,toolbar=no,location=no')">F</button>
		<span class="lock-label locked"></span>
		<script type="application/javascript">
			var $_ = document.querySelector.bind(document);
			if (window.location.hash.indexOf('no_popup')>=0)
				$_('button').remove();
			var colors = ['#F00','#0F0','#00F','#FF0','#F0F','#0FF','purple','orange','pink','grey','chartreuse'];
			var cvs = $_('canvas');
			cvs.width = cvs.getClientRects()[0].width;
			cvs.height = cvs.getClientRects()[0].height;
			var img = $_('img');
			var ctx = cvs.getContext('2d');
			ctx.lineWidth=2;
			ctx.strokeStyle='#0F0';
			var selected = 0;
			var locked = true;
			var overlays = [{x:.5,y:.5},{x:.5,y:.5}];
			if ('overlay' in localStorage)
				overlays = [JSON.parse(localStorage['overlay']),{x:.5,y:.5}];/*backwards compat.*/
			if ('overlays' in localStorage)
				overlays = JSON.parse(localStorage['overlays']);
			for (let overlay of overlays) {
				overlay.x *= cvs.width;
				overlay.y *= cvs.height;
				if (!('c' in overlay))
					overlay.c = Math.round(Math.random() * colors.length);
			}
			function updateOverlays() {
				var w = cvs.width * .05;
				var h = cvs.height * .1;
				console.groupCollapsed('Drawing overlays');
				ctx.clearRect(0,0,cvs.width, cvs.height);
				for (var i in overlays) {
					ctx.strokeStyle = colors[overlays[i].c];
					var x = overlays[i].x;
					var y = overlays[i].y;
					ctx.beginPath();
					ctx.moveTo(x, y - h);
					ctx.lineTo(x, y + h);
					ctx.stroke();
					ctx.beginPath();
					ctx.moveTo(x - w, y);
					ctx.lineTo(x + w, y);
					ctx.stroke();
					if (i == selected && !locked) {
						ctx.beginPath();
						ctx.ellipse(x, y, w, h, 0, 0, 2 * Math.PI);
						ctx.stroke();
					}
					console.info({x:x,y:y,px:overlays[i].x/cvs.width,py:overlays[i].y/cvs.height});
				}
				console.groupEnd();
			}
			updateOverlays();
			function reset() {
				if (locked) {
					console.error("Overlays are locked. Press 'L' to unlock.");
					return;
				}
				var x = cvs.width/2;
				var y = cvs.height/2;
				var tmp = [];
				for (let overlay of overlays) {
					overlay.x = x;
					overlay.y = y;
					tmp.push({x:.5,y:.5,c:overlay.c});
				}
				localStorage['overlays'] = JSON.stringify(tmp);
				updateOverlay();
			}
			function move(dx, dy) {
				if (locked) {
					console.error("Overlays are locked. Press 'L' to unlock.");
					return;
				}
				console.log('moving overlay ' + selected,{dx:dx,dy:dy});
				var overlay = overlays[selected];
				overlay.x += dx;
				overlay.y += dy;
				var tmp;
				if ('overlays' in localStorage && (tmp = JSON.parse(localStorage['overlays'])).length == overlays.length) {
					tmp[selected] = {x:overlay.x/cvs.width,y:overlay.y/cvs.height,c:overlays[selected].c};
				} else {
					tmp = [];
					for (var overlay of overlays)
						tmp.push({x:overlay.x/cvs.width,y:overlay.y/cvs.height,c:overlays[selected].c});
				}
				localStorage['overlays'] = JSON.stringify(tmp);
				updateOverlays();
			}
			document.addEventListener('keydown',function(e) {
				var dx = 0, dy = 0;
				console.log('keydown',{key:e.key, code:e.code});
				if (e.code == 'ArrowDown' || e.code == 'KeyS') {
					dy++;
				} else if (e.code == 'ArrowUp' || e.code == 'KeyW') {
					dy--;
				} else if (e.code == 'ArrowLeft' || e.code == 'KeyA') {
					dx--;
				} else if (e.code == 'ArrowRight' || e.code == 'KeyD') {
					dx++;
				} else if (e.code == 'KeyR') {
					return reset();
				} else if (e.code == 'KeyL') {
					locked = !locked;
					console.warn('Overlays are ' + (locked ? '' : 'not ') + 'locked.');
					$_('.lock-label').classList.remove('locked','unlocked');
					$_('.lock-label').classList.add(locked ? 'locked' : 'unlocked');
					updateOverlays();
					return;
				} else if (e.code == 'KeyC') {
					if (locked) {
						console.error("Overlays are locked. Press 'L' to unlock.");
						return;
					}
					var overlay = overlays[selected];
					overlay.c++;
					if (overlay.c > colors.length - 1)
						overlay.c = 0;
				} else if (e.code == 'Tab') {
					e.preventDefault();
					if (locked) {
						console.error("Overlays are locked. Press 'L' to unlock.");
						return;
					}
					selected += e.shiftKey ? -1 : 1;
					if (selected < 0)
						selected = overlays.length - 1;
					if (selected > overlays.length - 1)
						selected = 0;
					updateOverlays();
				} else {
					console.warn('Unknown key pressed', e);
					return;
				}
				if (!e.shiftKey) {
					dx*=5;
					dy*=5;
					if (e.ctrlKey) {
						dx*=2;
						dy*=2;
					}
				}
				move(dx, dy);
			});
			console.log('loaded');
		</script>
	</body>
</html>

